@use '@styles/variables' as var;

$themes: (
  light: (
    bg: var.$bg-primary--light,
    bg-button: var.$bg-button--light,
    bg-button-card: var.$bg-button-card--light,
    bg-button-hover: var.$bg-button-hover--light,
    bg-button-card-hover: var.$bg-button-card-hover--light,
    bg-card: var.$bg-card--light,
    bg-deck: var.$bg-deck--light,
    bg-deck-hover: var.$bg-deck-hover--light,
    bg-dropdown: var.$bg-dropdown--light,
    bg-form-element: var.$bg-form-element--light,
    bg-nav: var.$bg-nav--light,
    bg-nav-gradient-primary: var.$bg-nav-gradient-primary--light,
    bg-nav-gradient-secondary: var.$bg-nav-gradient-secondary--light,
    bg-nav-hover: var.$bg-nav-hover--light,
    bg-nav-mobile: var.$bg-nav-mobile--light,
    bg-secondary: var.$bg-secondary--light,
    border-button: var.$border-button--light,
    border-button-card: var.$border-button-card--light,
    border-button-hover: var.$border-button-hover--light,
    border-button-card-hover: var.$border-button-card-hover--light,
    border-form-element: var.$border-form-element--light,
    shadow-button: var.$shadow-button--light,
    shadow-button-card: var.$shadow-button-card--light,
    shadow-card: var.$shadow-card--light,
    shadow-deck: var.$shadow-deck--light,
    shadow-form-element: var.$shadow-form-element--light,
    shadow-form-element-dropdown: var.$shadow-form-element-dropdown--light,
    shadow-nav: var.$shadow-nav--light,
    text: var.$text--light,
    text-form-element-placeholder: var.$text-form-element-placeholder--light,
  ),
  dark: (
    bg: var.$bg-primary--dark,
    bg-button: var.$bg-button--dark,
    bg-button-card: var.$bg-button-card--dark,
    bg-button-hover: var.$bg-button-hover--dark,
    bg-button-card-hover: var.$bg-button-card-hover--dark,
    bg-card: var.$bg-card--dark,
    bg-deck: var.$bg-deck--dark,
    bg-deck-hover: var.$bg-deck-hover--dark,
    bg-dropdown: var.$bg-dropdown--dark,
    bg-form-element: var.$bg-form-element--dark,
    bg-nav: var.$bg-nav--dark,
    bg-nav-gradient-primary: var.$bg-nav-gradient-primary--dark,
    bg-nav-gradient-secondary: var.$bg-nav-gradient-secondary--dark,
    bg-nav-hover: var.$bg-nav-hover--dark,
    bg-nav-mobile: var.$bg-nav-mobile--dark,
    bg-secondary: var.$bg-secondary--dark,
    border-button: var.$border-button--dark,
    border-button-card: var.$border-button-card--dark,
    border-button-hover: var.$border-button-hover--dark,
    border-button-card-hover: var.$border-button-card-hover--dark,
    border-form-element: var.$border-form-element--dark,
    shadow-button: var.$shadow-button--dark,
    shadow-button-card: var.$shadow-button-card--dark,
    shadow-card: var.$shadow-card--dark,
    shadow-deck: var.$shadow-deck--dark,
    shadow-form-element: var.$shadow-form-element--dark,
    shadow-form-element-dropdown: var.$shadow-form-element-dropdown--dark,
    shadow-nav: var.$shadow-nav--dark,
    text: var.$text--dark,
    text-form-element-placeholder: var.$text-form-element-placeholder--dark,
  ),
);

/**
 * Mixin to that will generate CSS blocks for each theme.
*/
@mixin themed() {
  // For each theme defined in the $themes variable
  @each $theme, $map in $themes {
    :global(.theme--#{$theme}) & {
      // Create a global map ($theme-map) that contains values for each key in the theme.
      $theme-map: () !global;
      @each $key, $submap in $map {
        $value: map-get(map-get($themes, $theme), '#{$key}');
        // Merge each key-value pair into the theme-specific map.
        $theme-map: map-merge(
          $theme-map,
          (
            $key: $value,
          )
        ) !global;
      }
      // Execute the contents of the mixin.
      @content;
      // Unset the theme map to ensure that the $theme-map does not affect other themes.
      $theme-map: null !global;
    }
  }
}

@mixin gthemed() {
  // For each theme defined in the $themes variable
  @each $theme, $map in $themes {
    .theme--#{$theme} & {
      // Create a global map ($theme-map) that contains values for each key in the theme.
      $theme-map: () !global;
      @each $key, $submap in $map {
        $value: map-get(map-get($themes, $theme), '#{$key}');
        // Merge each key-value pair into the theme-specific map.
        $theme-map: map-merge(
          $theme-map,
          (
            $key: $value,
          )
        ) !global;
      }
      // Execute the contents of the mixin.
      @content;
      // Unset the theme map to ensure that the $theme-map does not affect other themes.
      $theme-map: null !global;
    }
  }
}

/**
 * Retrieves values from the theme-specific map.
*/
@function t($key) {
  @return map-get($theme-map, $key);
}
